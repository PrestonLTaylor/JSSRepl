@page "/"
@inject IJSRuntime js
@inject IJSSService jss
@inject IGitHubService github
@rendermode InteractiveServer

<PageTitle>JSS Repl</PageTitle>

<h3 class="title-bar">JSS Repl</h3>

<article class="content">
    <EditForm class="repl-console" EditContext="editContext" OnSubmit="ExecuteAsync"  FormName="REPLConsole" Enhance>
        <InputTextArea class="form-control script-input" @onkeydown="@(async e => await OnScriptInputKeyDown(e))" spellcheck="false" placeholder="Enter your script here..." @bind-Value="Script" />
        <ConsoleOutput Items=@ConsoleItems />

        <button class="btn btn-outline-secondary execute-button" type="submit" @ref="buttonReference">Execute (Ctrl+Enter)</button>
    </EditForm>
    <small class="form-text text-muted">Executed using the JSS JavaScript engine (built from <a class="link-primary" href="@BuildCommitLink">@ShortBuildCommitHash</a>).</small> <br />
</article>

@if (IsLoading)
{
    <div class="suspense"></div>
}

<script src="submission.js"></script>

@code {
    protected override async Task OnInitializedAsync()
    {
        editContext = new(Script);

        // NOTE: We use the latest commit hash from the master branch as that will be the commit used in the latest JSS NuGet package
        // We also use dependabot so we can easily update the NuGet package so it will be up-to-date
        var latestCommit = await github.GetBuildCommitAsync();
        ShortBuildCommitHash = latestCommit.Sha[0..7];
        BuildCommitLink = latestCommit.HtmlUrl;
    }

    private ElementReference buttonReference;
    private async Task OnScriptInputKeyDown(KeyboardEventArgs e)
    {
        if (e.CtrlKey && e.Key == "Enter")
        {
            await js.InvokeVoidAsync("submitForm", buttonReference);
        }
    }

    private async Task ExecuteAsync()
    {
        IsLoading = true;
        var result = await jss.ExecuteStringAsJavaScriptAsync(Script);
        AddExecutionResultToConsole(result);
        IsLoading = false;
    }

    private void AddExecutionResultToConsole(ExecutionResult result)
    {
        ConsoleItems.Add(new(
            Value: result.Value,
            IsError: !result.IsNormalCompletion
        ));
    }

    [SupplyParameterFromForm]
    private string Script { get; set; } = "";

    private bool IsLoading { get; set; } = false;

    private List<ConsoleItem> ConsoleItems { get; } = [];

    private string ShortBuildCommitHash { get; set; } = "";
    private string BuildCommitLink { get; set; } = "";

    private EditContext? editContext;
}
